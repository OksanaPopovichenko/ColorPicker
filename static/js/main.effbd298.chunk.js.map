{"version":3,"sources":["components/ColorPicker/ColorPicker.js","App.js","serviceWorker.js","index.js"],"names":["ColorPicker","props","componentDidMount","hexToRgb","value","updateColor","e","name","target","setState","hex","rgbToHex","state","red","green","blue","colorSnipped","handleListOfColors","prevState","showListOfColors","handleSliders","showSliders","setColorFromList","color","onChange","cancelChangeColor","result","exec","parseInt","componentToHex","c","Math","abs","toString","length","r","g","b","setColorFromRGB","bind","this","items","key","push","onClick","Grid","style","background","Object","entries","colors","className","container","direction","wrap","justify","alignItems","TextField","icon","faCaretDown","onOutsideClick","id","type","min","max","steps","event","Button","variant","React","Component","App","handleColor","yellow","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.effbd298.chunk.js","sourcesContent":["import React from 'react'\nimport { Grid, TextField, Button } from '@material-ui/core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons'\nimport OutsideClickHandler from 'react-outside-click-handler';\nimport './ColorPicker.scss';\n\nclass ColorPicker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showListOfColors: false,\n            showSliders: false,\n            colorSnipped: this.props.value,\n        }\n\n        this.updateColor = this.updateColor.bind(this);\n        this.handleListOfColors = this.handleListOfColors.bind(this);\n        this.handleSliders = this.handleSliders.bind(this);\n        this.setColorFromList = this.setColorFromList.bind(this);\n        this.cancelChangeColor = this.cancelChangeColor.bind(this);\n        this.setColorFromRGB = this.setColorFromRGB.bind(this);\n        this.hexToRgb = this.hexToRgb.bind(this);\n        this.rgbToHex = this.rgbToHex.bind(this);\n        this.componentToHex = this.componentToHex.bind(this);\n    }\n\n    componentDidMount = () => {\n        this.hexToRgb(this.props.value)\n    }\n\n    updateColor = (e) => {\n        const name = e.target.name;\n        const value = e.target.value;\n        this.setState({ [name]: value });\n\n        let hex = this.rgbToHex(this.state.red, this.state.green, this.state.blue);\n        this.setState({ colorSnipped: hex });\n    }\n\n    handleListOfColors = () => {\n        this.setState(prevState => ({\n            showListOfColors: !prevState.showListOfColors,\n        }));\n    }\n\n    handleSliders = () => {\n        this.setState(prevState => ({\n            showSliders: !prevState.showSliders,\n        }));\n    }\n\n    setColorFromList = (color) => {\n        this.setState({\n            colorSnipped: color,\n        })\n\n        this.handleListOfColors();\n        this.hexToRgb(color);\n        this.props.onChange(color)\n    }\n\n    cancelChangeColor = () => {\n        this.setState({ colorSnipped: this.props.value });\n\n        this.handleSliders();\n        this.hexToRgb(this.props.value);\n    }\n\n    hexToRgb = (hex) => {\n        let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n        this.setState({\n            red: parseInt(result[1], 16),\n            green: parseInt(result[2], 16),\n            blue: parseInt(result[3], 16),\n        })\n    }\n\n    componentToHex = (c) => {\n        let hex = Math.abs(c).toString(16);\n        return hex.length === 1 ? \"0\" + hex : hex;\n    }\n\n    rgbToHex = (r, g, b) => {\n        return \"#\" + this.componentToHex(r) + this.componentToHex(g) + this.componentToHex(b);\n    }\n\n    setColorFromRGB = () => {\n        let hex = this.rgbToHex(this.state.red, this.state.green, this.state.blue);\n\n        this.setState({\n            colorSnipped: hex\n        })\n\n        this.handleSliders();\n        this.props.onChange(hex);\n    }\n\n    render() {\n        const { showListOfColors, showSliders } = this.state;\n\n        const items = []\n        for (const [key, value] of Object.entries(this.props.colors)) {\n            items.push(<li onClick={() => this.setColorFromList(value)} key={key}>{key} <Grid style={{ background: `${value}` }}></Grid></li>)\n        }\n\n        return (\n            <Grid className=\"wrap\">\n                <Grid container\n                    className=\"color-picker\"\n                    direction=\"row\"\n                    wrap=\"nowrap\"\n                    justify=\"flex-start\"\n                    alignItems=\"center\">\n                    <TextField className=\"text-field\" value={this.props.value} />\n                    <Grid className=\"btn-color\" onClick={this.handleSliders}>\n                        <Grid className=\"color-squadre\" style={{ background: `${this.state.colorSnipped}` }}></Grid>\n                    </Grid>\n                    <Grid className=\"btn-down\" onClick={this.handleListOfColors}>\n                        <FontAwesomeIcon icon={faCaretDown} />\n                    </Grid>\n\n                    {showListOfColors ?\n                        <OutsideClickHandler onOutsideClick={() => this.handleListOfColors()}>\n                            <Grid className=\"color-list-wrap\">\n                                <ul className=\"color-list\">\n                                    {items}\n                                </ul>\n                            </Grid>\n                        </OutsideClickHandler>\n                    : null}\n\n                    {showSliders ?\n                        <OutsideClickHandler onOutsideClick={() => this.handleSliders()}>\n                            <Grid className=\"color-list-wrap color-slider-wrap\">\n                                <Grid className=\"sliders\">\n                                    <Grid className=\"track\">\n                                        <label>R:</label>\n                                        <input id=\"red\" type=\"range\"\n                                            name=\"red\"\n                                            min=\"0\"\n                                            max=\"255\"\n                                            steps=\"1\"\n                                            value={this.state.red}\n                                            onChange={event => this.updateColor(event)}\n                                        />\n                                    </Grid>\n                                    <Grid className=\"track\">\n                                        <label>G:</label>\n                                        <input id=\"green\" type=\"range\"\n                                            min=\"0\"\n                                            name=\"green\"\n                                            max=\"255\"\n                                            steps=\"1\"\n                                            value={this.state.green}\n                                            onChange={event => this.updateColor(event)}\n                                        />\n                                    </Grid>\n                                    <Grid className=\"track\">\n                                        <label>B:</label>\n                                        <input id=\"blue\" type=\"range\"\n                                            min=\"0\"\n                                            max=\"255\"\n                                            name=\"blue\"\n                                            steps=\"1\"\n                                            value={this.state.blue}\n                                            onChange={event => this.updateColor(event)}\n                                        />\n                                    </Grid>\n                                    <Grid className=\"btns-group\"\n                                        container\n                                        direction=\"row\"\n                                        justify='flex-end'>\n                                        <Button variant=\"outlined\" className=\"cancel\" onClick={this.cancelChangeColor}>Cancel</Button>\n                                        <Button variant=\"outlined\" className=\"okay\" onClick={this.setColorFromRGB}>Okay</Button>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </OutsideClickHandler>\n                    : null}\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nexport default ColorPicker;\n","import React from 'react';\nimport './App.scss';\nimport ColorPicker from './components/ColorPicker/ColorPicker';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: '#f2b74c',\n            colors: {\n                yellow: \"#f2b74c\",\n                red: \"#ef3c33\",\n                green: \"#00a05a\",\n                blue: \"#00adeb\"\n            }\n        }\n    }\n\n\n    handleColor = (color) => {\n        this.setState({ value: color })\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <ColorPicker colors={this.state.colors} value={this.state.value} onChange={this.handleColor} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}